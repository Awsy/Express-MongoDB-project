openapi: 3.0.1
info:
  version: 0.0.1
  title: School API
  description: School API
servers:
  - url: 'http://localhost:3000'
  
paths:
  /teachers:
    get:
      #deprecated: true
      summary: returns teachers collection
      tags: 
        - teachers
      responses:
        '200':
          description: displays teachers collection successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '404':
          description: teachers collection was not found
        '500': 
          description: server not found
    post:
      summary: inserting changes and data
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes were implemented successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    put:
      summary: editing data
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes are saved
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
    delete:
      summary: data was removed
      responses:
        '200':
          description: data was removed successfully
        '404':
          description: data not found
        '500':
          description: server not found
          
  /teachers/{teacherId}:
    get:
      summary: returns teachers Id
      parameters: 
        - name: teacherId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: teachers Id was successfully returned
        '404':
          description: teachers is not existed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    post:
      summary: input data and changes
      parameters: 
        - name: teacherId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: returns the success status if data insertion or changes were occurred
        '404':
          description: teacherId was not found
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    put:
      summary: applies modifications and changes
      parameters: 
        - name: teacherId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays success status when data were modified
        '403':
          description: editing data is forbidden
        '405':
          description: the editing method is not allowed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    delete:
      summary: returns something
      parameters: 
        - name: teacherId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: data was successfully removed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
  /subjects:
    get:
      summary: returns subjects collection
      responses:
        '200':
          description: displays subjects collection successfully
        '404':
          description: subjects collection was not found
        '500': 
          description: server not found
    
    post:
      summary: inserting changes and data
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes were implemented successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    put:
      summary: editing data
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes are saved
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
    delete:
      summary: data was removed
      responses:
        '200':
          description: data was removed successfully
        '404':
          description: data not found
      
  /subjects/{subjectId}:
    get:
      summary: returns subjectId Id
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: subject Id was successfully returned
        '404':
          description: subjectId is not existed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    post:
      summary: input data and changes
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: returns the success status if data insertion or changes were occurred
        '404':
          description: subjectId was not found
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    put:
      summary: applies modifications and changes
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays success status when data were modified
        '403':
          description: editing data is forbidden
        '405':
          description: the editing method is not allowed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    delete:
      summary: returns something
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: data was successfully removed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
                
  /subjects/{subjectId}/seasons:
    get:
      summary: returns seasons collection
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays seasons collection successfully
        '404':
          description: teachers collection was not found
        '500': 
          description: server not found
    post:
      summary: inserting changes and data
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes were implemented successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    put:
      summary: editing data
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes are saved
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
    delete:
      summary: data was removed
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: data was removed successfully
        '404':
          description: data not found
          
  /subjects/{subjectId}/seasons/{seasonId}:
    get:
      summary: returns seasonId Id
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: season Id was successfully returned
        '404':
          description: season Id is not existed
        '500':
          description: server was not found
          content:
            application/json:
              schema:
                type: object
          
    post:
      summary: input data and changes
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '201':
          description: returns the success status if data insertion or changes were occurred
        '404':
          description: subjectId was not found
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    put:
      summary: applies modifications and changes
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays success status when data were modified
        '403':
          description: editing data is forbidden
        '405':
          description: the editing method is not allowed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    delete:
      summary: removes season Id
      #need to add the below parameters to the rest of the paths
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: data was successfully removed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
                
  /subjects/{subjectId}/seasons/{seasonId}/lessons:
    get:
      summary: returns lessons collection
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays lessons collection successfully
        '404':
          description: lessons collection was not found
        '500': 
          description: server not found
    
    post:
      summary: inserting changes and data
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes were implemented successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    put:
      summary: editing data
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes are saved
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
    delete:
      summary: data was removed
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: data was removed successfully
        '404':
          description: data not found
          
  /subjects/{subjectId}/seasons/{seasonId}/lessons/{lessonId}:
    get:
      summary: returns lessonId Id
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: season Id was successfully returned
        '404':
          description: season Id is not existed
        '500':
          description: server was not found
          content:
            application/json:
              schema:
                type: object
          
    post:
      summary: input data and changes
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: returns the success status if data insertion or changes were occurred
        '404':
          description: subjectId was not found
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    put:
      summary: applies modifications and changes
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: displays success status when data were modified
        '403':
          description: editing data is forbidden
        '405':
          description: the editing method is not allowed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    delete:
      summary: removes season Id
      parameters: 
        - name: subjectId
          in: path
          required: true
          schema: 
            type: string
        - name: seasonId
          in: path
          required: true
          schema: 
            type: string
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: data was successfully removed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
  
  /pupils:
    get:
      summary: returns pupils collection
      responses:
        '200':
          description: displays pupils collection successfully
        '404':
          description: pupils collection was not found
        '500': 
          description: server not found
    post:
      summary: inserting changes and data
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes were implemented successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    put:
      summary: editing data
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes are saved
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
    delete:
      summary: data was removed
      responses:
        '200':
          description: data was removed successfully
        '404':
          description: data not found
        '500':
          description: server not found
    
  /pupils/{personId}:
    get:
      summary: returns personId Id
      parameters: 
        - name: personId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: season Id was successfully returned
        '404':
          description: season Id is not existed
        '500':
          description: server was not found
          content:
            application/json:
              schema:
                type: object
          
    post:
      summary: input data and changes
      parameters: 
        - name: personId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: returns the success status if data insertion or changes were occurred
        '404':
          description: subjectId was not found
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    put:
      summary: applies modifications and changes
      parameters: 
        - name: personId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays success status when data were modified
        '403':
          description: editing data is forbidden
        '405':
          description: the editing method is not allowed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    delete:
      summary: removes season Id
      parameters: 
        - name: personId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: data was successfully removed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
                
  /parents:
    get:
      summary: returns parents collection
      responses:
        '200':
          description: displays parents collection successfully
        '404':
          description: parents collection was not found
        '500': 
          description: server not found
    post:
      summary: inserting changes and data
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes were implemented successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    put:
      summary: editing data
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes are saved
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
    delete:
      summary: data was removed
      responses:
        '200':
          description: data was removed successfully
        '404':
          description: data not found
          
  /parents/{parentId}:
    get:
      summary: returns parentId Id
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: season Id was successfully returned
        '404':
          description: season Id is not existed
        '500':
          description: server was not found
          content:
            application/json:
              schema:
                type: object
          
    post:
      summary: input data and changes
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: returns the success status if data insertion or changes were occurred
        '404':
          description: subjectId was not found
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    put:
      summary: applies modifications and changes
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays success status when data were modified
        '403':
          description: editing data is forbidden
        '405':
          description: the editing method is not allowed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    delete:
      summary: removes parent Id
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: data was successfully removed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
                
  /parents/{parentId}/pupils:
    get:
      summary: returns pupils collection
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays pupils collection successfully
        '404':
          description: pupils collection was not found
        '500': 
          description: server not found
    post:
      summary: inserting changes and data
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes were implemented successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    put:
      summary: editing data
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes are saved
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
    delete:
      summary: data was removed
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: data was removed successfully
        '404':
          description: data not found
        '500':
          description: server not found
    
  /parents/{parentId}/pupils/{personId}:
    get:
      summary: returns personId Id
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
            
        - name: personId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: season Id was successfully returned
        '404':
          description: season Id is not existed
        '500':
          description: server was not found
          content:
            application/json:
              schema:
                type: object
          
    post:
      summary: input data and changes
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
        - name: personId
          in: path
          required: true
          schema: 
            type: string 
      responses:
        '200':
          description: returns the success status if data insertion or changes were occurred
        '404':
          description: subjectId was not found
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    put:
      summary: applies modifications and changes
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
        - name: personId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays success status when data were modified
        '403':
          description: editing data is forbidden
        '405':
          description: the editing method is not allowed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    delete:
      summary: removes season Id
      parameters: 
        - name: parentId
          in: path
          required: true
          schema: 
            type: string
        - name: personId
          in: path
          required: true
          schema: 
            type: string      
      responses:
        '200':
          description: data was successfully removed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
  #----------------------------------------              
          
  /classes:
    get:
      summary: returns classes collection
      responses:
        '200':
          description: displays classes collection successfully
        '404':
          description: classes collection was not found
        '500': 
          description: server not found
    post:
      summary: inserting changes and data
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes were implemented successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    put:
      summary: editing data
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes are saved
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
    delete:
      summary: data was removed
      responses:
        '200':
          description: data was removed successfully
        '404':
          description: data not found
          
  /classes/{classId}:
    get:
      summary: returns classId Id
      parameters: 
        - name: classId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: season Id was successfully returned
        '404':
          description: season Id is not existed
        '500':
          description: server was not found
          content:
            application/json:
              schema:
                type: object
          
    post:
      summary: input data and changes
      parameters: 
        - name: classId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: returns the success status if data insertion or changes were occurred
        '404':
          description: subjectId was not found
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    put:
      summary: applies modifications and changes
      parameters: 
        - name: classId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays success status when data were modified
        '403':
          description: editing data is forbidden
        '405':
          description: the editing method is not allowed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
          
    delete:
      summary: removes class Id
      parameters: 
        - name: classId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: data was successfully removed
        '500':
          description: servers not found
          content:
            application/json:
              schema:
                type: object
                
  /classes/{classId}/gradebook:
    get:
      summary: returns gradebook collection
      parameters: 
        - name: classId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: displays gradebook collection successfully
        '404':
          description: gradebook collection was not found
        '500': 
          description: server not found
    post:
      summary: inserting changes and data
      parameters: 
        - name: classId
          in: path
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes were implemented successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    put:
      summary: editing data
      parameters: 
        - name: classId
          in: path
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: changes are saved
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
    delete:
      summary: data was removed
      parameters: 
        - name: classId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: data was removed successfully
        '404':
          description: data not found
          
#------------ here we start building the component   
          
components:
  schemas:
    Teacher:
      type: object
      required:
        - hash
      properties: 
        hash: 
          type: string
          minLength: 3
          maxLength: 15
          example: "teacher"
        name:
          type: object
          properties:
            first: 
              type: string
              example: Andrey
            last:
              type: string
              example: Prisniak
        image:
          type: string
          example: http://example.com/image.jpg
        dateOfBirth:
          type: string
          format: date
          example: 22/04/1990
        emails:
          type: array
          items: 
            type: object
            properties:
              email:
                type: string
                example: test@mail.com
              primary:
                type: boolean
                example: true
        phones: 
          type: array
          items:
            type: object
            properties: 
              phone: 
                type: string
                example: to be determined
              primary:
                type: boolean
                example: true
                
        sex: 
          type: string
          enum: [m, f]
          example: f
          
        social:
          type: object
          properties:
            facebook: 
              type: string
              example: aws shkara
            linkedIn: 
              type: string
              example: aws-shkara
            skype: 
              type: string
              example: aws.shkara
            telegram: 
              type: string
              example: Atawsy  
          
        subjects:
          type: array
          items:
            type: object
            properties:
              subject:
                type: string
                example: http://example.com/api/subjects/123
                
        description:
          type: string
          example: information about teachers
          
        started:
          type: string
          format: date
          example: 17/09/2018
          
        created:
          type: string
          format: date
          example: 17/09/2018
     
    subject:
      type: object
      properties:
        hash: 
          type: string
          minLength: 2
          maxLength: 15
          example: "subjects"
        title:
          type: string
          example: teachers
        image:
          type: string
          example: http://example.com/image1.jpg  
        seasons:
          type: array
          items:
            type: object
            properties:
              seasons: 
                type: string
                example: season
        description:
          type: string
          example: information about seasons
        created:
          type: string
          format: date
          example: 17/09/2018
    season:
      type: object
      properties:
        hash:
          type: string
          minLength: 3
          maxLength: 15
          example: "season"
        order:
          type: integer
          example: 3
        title:
          type: string
          example: season
        image:
          type: string
          example: http://example.com/image2.jpg
        subject:
          type: string
          example: math
        lessons:
          type: array
          items: 
            type: object
            properties:
              lesson:
                type: string
                example: http://example.com/api/lessons/12
                
        description:
          type: string
          example: information about seasons
        created:
          type: string
          format: date
          example: 18/09/2018
          
    lesson:
      type: object
      properties:
        hash:
          type: string
          minLength: 3
          maxLength: 15
          example: "lesson"
        order:
          type: integer
          example: 2
        title:
          type: string
          example: season
        image:
          type: string
          example: http://example.com/image3.jpg
        subject:
          type: string
          example: http://example.com/api/lessons/13
        description:
          type: string
          example: information about lessons
        created:
          type: string
          format: date
          example: 18/09/2018
          
    person:
      type: object
      properties:
        hash:
          type: string
          minLength: 3
          maxLength: 15
          example: "person"
        name:
          type: object
          properties:
            first:
              type: string
              example: Aws
            last:
              type: string
              example: Shkara
        image:
          type: string
          example: http://example.com/image4.jpg      
        dateOfBirth:
          type: string
          format: date
          example: 29/08/1989
        emails:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
                example: testing@mail.com
              primary:
                type: boolean
                example: true
        phones:
          type: array
          items:
            type: object
            properties:
              phone:
                type: string
                example: tbd-----
              primary:
                type: boolean
                example: true
        sex: 
          type: string
          enum: [male, female]
          example: female
        social:
          type: object
          properties:
            facebook: 
              type: string
              example: aws shkara
            linkedIn: 
              type: string
              example: aws-shkara
            skype: 
              type: string
              example: aws.shkara
            telegram: 
              type: string
              example: Atawsy
        class:
          type: object
          example: http://example.com/api/classes/13
        parents:
          type: array
          items: 
            type: object
            properties:
              parent:
                type: string
                example: http://example.com/api/parents/135
        description:
          type: string
          example: information about parents
        started:
          type: string
          format: date
          example: 18/09/2018   
        created:
          type: string
          format: date
          example: 18/09/2018 
          
    parent:
      type: object
      properties:
        hash:
          type: string
          minLength: 3
          maxLength: 15
          example: "person"
        name:
          type: object
          properties:
            first:
              type: string
              example: Aws
            last:
              type: string
              example: Shkara
        image:
          type: string
          example: http://example.com/image4.jpg      
        dateOfBirth:
          type: string
          format: date
          example: 29/08/1989
        emails:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
                example: testing@mail.com
              primary:
                type: boolean
                example: true
        phones:
          type: array
          items:
            type: object
            properties:
              phone:
                type: string
                example: tbd-----
              primary:
                type: boolean
                example: true
        sex: 
          type: string
          enum: [male, female]
          example: male
        social:
          type: object
          properties:
            facebook: 
              type: string
              example: aws shkara
            linkedIn: 
              type: string
              example: aws-shkara
            skype: 
              type: string
              example: aws.shkara
            telegram: 
              type: string
              example: Atawsy 
        pupils:
          type: array
          items: 
            type: object
            properties:
              person:
                type: string
                example: http://example.com/api/pupils/135
        description:
          type: string
          example: information about parents
        started:
          type: string
          format: date
          example: 18/09/2018   
        created:
          type: string
          format: date
          example: 18/09/2018
    class:
      type: object
      properties:
        hash:
          type: string
          minLength: 3
          maxLength: 13
          example: class
        order:
          type: integer
          example: 7
        title:
          type: string
          example: geography class
        image:
          type: string
          example: http://example.com/image5.jpg
        room:
          type: integer
          example: 2
        floor:
          type: integer
          example: 5
        gradebooks:
          type: array
          items:
            type: object
            properties:
              gradebook:
                type: string
                example: http://example.com/api/gradebook/135
        description:
          type: string
          example: information about class
        created:
          type: string
          format: date
          example: 18/09/2018 
    gradebook:
      type: object
      properties:
        hash:
          type: string
          minLength: 3
          maxLength: 15
          example: gradebook
        image:
          type: string
          example: http://example.com/image6.jpg
        year:
          type: integer
          example: 2018
        class:
          type: string
          example: http://example.com/api/classes/135
        records:
          type: array
          items:
            type: object
            properties:
              personHash:
                type: string
                example: Teacher123
              teacherHash:
                type: string
                example: teacher12
              subjectHash:
                type: string
                example: historySubject
              seasonHash:
                type: string
                example: 1st season
              lessonHash:
                type: string
                example: geographyLesson
              mark:
                type: integer
                minimum: 1
                exclusiveMinimum: true
                maximum: 12
                exclusiveMaximum: true
                example: 12
        description:
          type: string
          example: information about class
        created:
          type: string
          format: date
          example: 18/09/2018         
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic